{{- /* range services map (dict) */}}
{{- range $name, $s := $.Values.services }}
---
kind: Service
apiVersion: v1
metadata:
  name: {{ include "helpers.app.fullname" (dict "name" $name "context" $) }}
  namespace: {{ include "helpers.app.namespace" $ }}
  labels:
    {{- include "helpers.app.labels" $ | nindent 4 }}
    {{- with .labels }}{{- include "helpers.tplvalues.render" (dict "value" . "context" $) | nindent 4 }}{{- end }}
  annotations:
    {{- with $.Values.generic.annotations }}{{- include "helpers.tplvalues.render" (dict "value" . "context" $) | nindent 4 }}{{- end }}
    {{- with .annotations }}{{- include "helpers.tplvalues.render" (dict "value" . "context" $) | nindent 4 }}{{- end }}
spec:
  {{- if not (empty .clusterIP ) }}
  clusterIP: {{ .clusterIP }}
  {{- end }}
  {{- if not (empty .type) }}
  type: {{ .type }}
  {{- if eq .type "LoadBalancer" }}
  {{- if not (empty .loadBalancerIP) }}
  loadBalancerIP: {{ .loadBalancerIP }}
  {{- end }}
  {{- if .loadBalancerSourceRanges }}
  loadBalancerSourceRanges:
    {{- toYaml .loadBalancerSourceRanges | nindent 4 }}
  {{- end }}
  {{- else if (eq .type "NodePort") }}
  {{- if empty .externalTrafficPolicy }}
  externalTrafficPolicy: "Cluster"
  {{- else }}
  externalTrafficPolicy: {{ .externalTrafficPolicy }}
  {{- end }}
  {{- if not (empty .healthCheckNodePort) }}
  healthCheckNodePort: {{ .healthCheckNodePort }}
  {{- end }}
  {{- end }}
  {{- if .externalIPs }}
  externalIPs: {{- toYaml .externalIPs | nindent 4 }}
  {{- end }}
  {{- end }}
  selector:
  {{- include "helpers.app.selectorLabels" $ | nindent 4 }}
  {{- with .extraSelectorLabels }}{{- include "helpers.tplvalues.render" (dict "value" . "context" $) | nindent 4 }}{{- end }}
  ports:
{{- /* if ports is a slice (list) */}}
{{- /* https://stackoverflow.com/a/71797701/4474332 */}}
{{- if and .ports (kindIs "slice" .ports) -}}
{{- range .ports }}
  - name: {{ .name | default $name}}
    protocol: {{ .protocol | default "TCP"}}
    port: {{ .port }}
    {{- with .targetPort }}
    targetPort: {{ . }}
    {{- end }}
    {{- with .nodePort }}
    nodePort: {{ . }}
    {{- end }}
{{- end }}{{- /* end range ports (slice) */}}
{{- /* else if ports is a map (dict): */}}
{{- else if and .ports (kindIs "map" .ports) -}}
{{- range $namePort, $port := .ports }}
{{- if not (.disabled | default false) }}
  - name: {{ $namePort }}
    protocol: {{ .protocol | default "TCP"}}
    port: {{ .port }}
    {{- with .targetPort }}
    targetPort: {{ . }}
    {{- end }}
    {{- with .nodePort }}
    nodePort: {{ . }}
    {{- end }}
{{- end }}{{/* end if not .disabled */}}
{{- end }}{{/* end range ports (map) */}}
{{- end }}{{/* end if ports (slice and map) .. */}}
{{- end }}{{/* end range services .. */}}
